#!/usr/bin/env python

import os
import sys

from argparse import ArgumentParser, RawTextHelpFormatter

from execo.log import style
from execo_engine import logger

from dm_g5k.mongodb import MongoDBCluster
from dm_g5k.util import generate_hosts, generate_new_id, \
    get_default_id, cluster_exists, deserialize_cluster, remove_cluster, \
    serialize_cluster

CLUSTER_TYPE = "mongodb"

if __name__ == "__main__":

    prog = "mongo_g5k"
    description = "This tool helps you to manage a MongoDB cluster in Grid5000."
    parser = ArgumentParser(prog=prog,
                            description=description,
                            formatter_class=RawTextHelpFormatter,
                            add_help=False)

    actions = parser.add_argument_group(style.host("General options"),
                                        "Options to be used generally "
                                        "with MongoDB actions.")

    actions.add_argument("-h", "--help",
                         action="help",
                         help="Show this help message and exit")

    actions.add_argument("--id",
                         action="store",
                         nargs=1,
                         metavar="ID",
                         help="The identifier of the cluster. If not indicated"
                                ", last used cluster will be used (if any)")

    verbose_group = actions.add_mutually_exclusive_group()

    verbose_group.add_argument("-v", "--verbose",
                               dest="verbose",
                               action="store_true",
                               help="Run in verbose mode")

    verbose_group.add_argument("-q", "--quiet",
                               dest="quiet",
                               action="store_true",
                               help="Run in quiet mode")

    object_group = parser.add_argument_group(style.host("Object management "
                                                        "options"),
                                             "Options to create and destroy "
                                             "MongoDB cluster objects.")

    object_mutex_group = object_group.add_mutually_exclusive_group()

    object_mutex_group.add_argument("--create",
                                    metavar="MACHINELIST",
                                    nargs=1,
                                    action="store",
                                    help="Create the cluster object with the "
                                    "nodes in MACHINELIST file")

    object_mutex_group.add_argument("--delete",
                                    dest="delete",
                                    action="store_true",
                                    help="Remove all files used by the cluster")

    object_group.add_argument("--properties",
                              dest="properties",
                              nargs=1,
                              action="store",
                              help="File containing the properties to be used "
                              "(INI file). Applies only to --create")

    object_group.add_argument("--bootstrap",
                              metavar="MONGO_TAR",
                              nargs=1,
                              action="store",
                              help="Install MongoDB in the cluster nodes taking"
                                   " into account the specified properties.\n"
                                   "MONGO_TAR defines the path of the .tgz"
                                   " file containing MongoDB binaries.")

    actions = parser.add_argument_group(style.host("MongoDB actions"),
                                        "Actions to execute in the MongoDB "
                                        "cluster. Several options can be "
                                        "indicated at the same time.\n"
                                        "The order of execution is fixed no "
                                        "matter the order used in the "
                                        "arguments: it follows the order\n"
                                        "of the options.")

    actions.add_argument("--initialize",
                         dest="initialize",
                         action="store_true",
                         help="Initialize cluster: Copy configuration")

    actions.add_argument("--start",
                         dest="start",
                         action="store_true",
                         help="Start MongoDB server")

    actions.add_argument("--stop",
                         dest="stop",
                         action="store_true",
                         help="Stop MongoDB server")

    actions.add_argument("--clean",
                         dest="clean",
                         action="store_true",
                         help="Remove MongoDB logs and clean the data dir")

    exec_group = actions.add_mutually_exclusive_group()
    exec_group.add_argument("--shell",
                            action="store_true",
                            help="Start a shell session in mongodb")

    args = parser.parse_args()

    # Get id
    if args.id:
        mdb_id = int(args.id[0])
    else:
        if args.create:
            mdb_id = generate_new_id(CLUSTER_TYPE)
        else:
            mdb_id = get_default_id(CLUSTER_TYPE)
            if not mdb_id:
                logger.error("There is no available cluster. You must create a"
                             " new one")
                sys.exit(os.EX_DATAERR)

    logger.info("Using id = " + str(mdb_id) + " (MONGO DB)")

    verbose = True
    if args.quiet:
        verbose = False

    # Create or load object
    if args.create:

        if cluster_exists(CLUSTER_TYPE, mdb_id):
            logger.error("There is a Mongo DB cluster with that id. You must "
                         "remove it before or chose another id")
            sys.exit(os.EX_DATAERR)

        hosts = generate_hosts(args.create[0])

        if args.properties:
            mdb_cluster = MongoDBCluster(hosts, args.properties[0])
        else:
            mdb_cluster = MongoDBCluster(hosts)

    else:
        if args.properties:
            logger.warn("--properties only applies to cluster creation")

        if args.delete:

            # Clean
            mdb_cluster = deserialize_cluster(CLUSTER_TYPE, mdb_id)
            if mdb_cluster.initialized:
                logger.warn("The cluster needs to be cleaned before removed.")
                mdb_cluster.clean()

            # Remove hc dump file
            logger.info("Removing hc dump file from cluster")
            remove_cluster(CLUSTER_TYPE, mdb_id)

            sys.exit(os.EX_OK)
        else:
            # Deserialize
            mdb_cluster = deserialize_cluster(CLUSTER_TYPE, mdb_id)

    # Execute options
    if args.bootstrap:
        f = args.bootstrap[0]
        if not os.path.exists(f):
            logger.error("MongoDB distribution file " + f + " does not exist")
            sys.exit(os.EX_NOINPUT)
        mdb_cluster.bootstrap(args.bootstrap[0])

    if args.initialize:
        mdb_cluster.initialize()

    if args.start:
        mdb_cluster.start()

    if args.shell:
        mdb_cluster.start_shell()

    if args.stop:
        mdb_cluster.stop()

    if args.clean:
        mdb_cluster.clean()

    serialize_cluster(CLUSTER_TYPE, mdb_id, mdb_cluster)
